AWSTemplateFormatVersion: "2010-09-09"
Description: This template creates VPC, Route tables, Internet/NAT Gateways, public/private subnets

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "VPC Configuration"
        Parameters: 
          - VpcCIDR
      - 
        Label: 
          default: "Subnet Configuration"
        Parameters: 
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          - PrivateSubnet4CIDR

Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the IP range for this VPC
    Type: String
  
  PublicSubnet1CIDR:
    Default: 10.0.0.0/22
    Description: Please enter the IP range for this public subnet 1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.4.0/22
    Description: Please enter the IP range for this public subnet 2
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.8.0/22
    Description: Please enter the IP range for this private subnet 1
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.12.0/22
    Description: Please enter the IP range for this private subnet 2
    Type: String
  
  PrivateSubnet3CIDR:
    Default: 10.0.16.0/22
    Description: Please enter the IP range for this private subnet 3
    Type: String

  PrivateSubnet4CIDR:
    Default: 10.0.20.0/22
    Description: Please enter the IP range for this private subnet 4
    Type: String

Resources:
# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: VPC
        - Key: env
          Value: PoC

# Create IGW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name 
          Value: IGW
        - Key: env
          Value: PoC

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Create Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: PublicSubnet1
        - Key: env
          Value: PoC
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: PublicSubnet2
        - Key: env
          Value: PoC
      VpcId: !Ref VPC

# Create Public Route Table and Attach Public Routes
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: Public Route Table
        - Key: env
          Value: PoC
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Allocate Elastic IP 1
  NATGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EIP 1
        - Key: env
          Value: PoC

# Allocate Elastic IP 2
  NATGateway2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EIP 2
        - Key: env
          Value: PoC

# Create NAT 1 Gateway
  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NATGateway1
        - Key: env
          Value: PoC

# Create NAT 2 Gateway
  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NATGateway2
        - Key: env
          Value: PoC

# Create Private Subnets for App
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: PrivateSubnet1-App
        - Key: env
          Value: PoC
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: PrivateSubnet2-App
        - Key: env
          Value: PoC
      VpcId: !Ref VPC

# Create Private Subnets for Database w/o Internet access
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: PrivateSubnet3-Database
        - Key: env
          Value: PoC
      VpcId: !Ref VPC

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: PrivateSubnet3-Database
        - Key: env
          Value: PoC
      VpcId: !Ref VPC

# Create Private Route Table 1
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: Private Route Table 1
        - Key: env
          Value: PoC
      VpcId: !Ref VPC

# Add a route to point internet-bound traffic to Nat Gateway 1
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1
      RouteTableId: !Ref PrivateRouteTable1

# Associate Private Subnet 1 with Private Route Table 1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

# Create Private Route Table 2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: Private Route Table 2
        - Key: env
          Value: PoC
      VpcId: !Ref VPC

# Add a route to point internet-bound traffic to Nat Gateway 2
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2
      RouteTableId: !Ref PrivateRouteTable2

# Associate Private Subnet 2 with Private Route Table 2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

# Create Private Route Table 3 for Database
  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: Private Route Table 3
        - Key: env
          Value: PoC
      VpcId: !Ref VPC

# Associate Private Subnet 3 with Private Route Table 3
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

# Associate Private Subnet 4 with Private Route Table 3
  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet4

Outputs:
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

  PublicSubnet1:
    Description: PublicSubnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: PublicSubnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: PrivateSubnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
    Value: !Ref PrivateSubnet1
  
  PrivateSubnet2:
    Description: PrivateSubnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
    Value: !Ref PrivateSubnet2
  
  PrivateSubnet3:
    Description: PrivateSubnet 3 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3
    Value: !Ref PrivateSubnet3
  
  PrivateSubnet4:
    Description: PrivateSubnet 4 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet4
    Value: !Ref PrivateSubnet4

